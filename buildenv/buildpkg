#!/bin/bash
set -e


# =====
say() {
	tput bold
	tput setaf 3
	echo "----- $@"
	tput sgr0
}

die() {
	tput bold
	tput setaf 1
	echo "----- $@"
	tput sgr0
	exit 1
}

get_pkgbuild_info() {
	local pkgbuild_path="$1"
	source <( \
		source "$pkgbuild_path" \
		; [ -z "$epoch" ] || epoch_prefix="$epoch:" \
		; deps=("${depends[@]}" "${makedepends[@]}" "${checkdepends[@]}") \
		; printf %s\\n \
			"_RET_PKGNAMES=\"${pkgname[*]}\"" \
			"_RET_VERSION=\"$epoch_prefix$pkgver-$pkgrel\"" \
			"_RET_DEPS=\"${deps[*]}\"" \
			"_RET_KEYS=\"${validpgpkeys[*]}\"" \
	)
	[ -n "$_RET_VERSION" ] || die "Missing or incorrect PKGBUILD"
}

append_repo() {
	local repo_name="$1"
	local repo_dir="$2"
	if [ -f "$repo_dir/$repo_name.db.tar.gz" ]; then
		say "Appending repo $repo_name to /etc/pacman.conf ..."
		cat <<-EOF>>/etc/pacman.conf
			[$repo_name]
			Server = file://$repo_dir
			SigLevel = Required DatabaseOptional
			EOF
	fi
}

get_latest_version() {
	local repo_dir="$1"
	local pkg_name="$2"
	_RET_VERSION=$(cat "$repo_dir/latest/$pkg_name" 2>/dev/null || true)
}

set_latest_version() {
	local repo_dir="$1"
	local pkg_name="$2"
	local version="$3"
	mkdir -p "$repo_dir/latest"
	echo "$version" > "$repo_dir/latest/$pkg_name"
}

unset_latest_version() {
	local repo_dir="$1"
	local pkg_name="$2"
	rm -f "$repo_dir/latest/$pkg_name"
}

prepare_build_dir() {
	local pkg_dir="$1"
	local build_dir="$2"
	say "Preparing build directory ..."
	[ -d "$build_dir" ] || die "Missing build dir" $build_dir
	find "$build_dir" -mindepth 1 -delete
	cp "$pkg_dir"/* "$build_dir"
}

install_deps() {
	local deps="$1"
	if [ -n "$deps" ]; then
		say "Installing dependencies ..."
		# https://unix.stackexchange.com/questions/274727/how-to-force-pacman-to-answer-yes-to-all-questions
		# https://bugs.archlinux.org/task/48835
		pacman --noconfirm --ask=4 -Syu
		pacman --noconfirm --ask=4 --needed -S $deps
	fi
}

sign_piped() {
	sudo -u alarm xargs -n1 -L1 bash -c "gpg \
			--verbose \
			--pinentry-mode loopback \
			--local-user $REPO_KEY \
			--detach-sign \
			--use-agent \
			--no-autostart \
			\$0 \
		|| exit 255"
}

test_sign() {
	local build_dir="$1"
	pushd "$build_dir" >/dev/null
	say "Testing sign ..."
	rm -f .testsign{,.sig}
	echo "test" > .testsign
	echo .testsign | sign_piped
	rm .testsign{,.sig}
	popd >/dev/null
}

build() {
	local build_dir="$1"
	pushd "$build_dir" >/dev/null
	say "Building package ..."
	sudo -u alarm --preserve-env=CCACHE_DIR makepkg
	say "Signing package(s) ..."
	ls *.pkg.tar.xz | sign_piped
	popd >/dev/null
}

remove_from_repo() {
	local repo_dir="$1"
	local pkg_name="$2"
	local version="$3"
	say "Removing old package(s) from repo ..."
	rm -f "$repo_dir/$pkg_name"{,-*}-"$version"-*.pkg.tar.xz{,.sig}
}

copy_to_repo() {
	local build_dir="$1"
	local repo_dir="$2"
	say "Placing package(s) to repo ..."
	cp "$build_dir"/*.pkg.tar.xz{,.sig} "$repo_dir"
}

rebuild_repo() {
	local repo_name="$1"
	local repo_dir="$2"
	say "Rebuilding repo ..."
	pushd "$repo_dir" >/dev/null
	rm -f "$repo_name".*
	repo-add "$repo_name.db.tar.gz" *.pkg.tar.xz
	popd >/dev/null
}


# ===== Main =====
main() {
	local pkg_name="$1"; [ -n "$pkg_name" ] || die "Missing package name"
	local force="$2"
	local norepo="$3"

	[ -n "$REPO_NAME" ] || die "Missing REPO_NAME variable"
	[ -n "$REPO_KEY" ] || die "Missing REPO_KEY variable"
	[ -n "$REPO_DIR" ] || die "Missing REPO_DIR variable"
	[ -n "$BUILD_DIR" ] || die "Missing BUILD_DIR variable"
	[ -n "$PACKAGES_DIR" ] || die "Missing PACKAGES_DIR variable"
	[ -n "$MAKE_J" ] || die "Missing MAKE_J variable"
	[ -n "$CCACHE_DIR" ] || die "Missing CCACHE_DIR variable"

	# =====

	get_pkgbuild_info "$PACKAGES_DIR/$pkg_name/PKGBUILD"
	local pkgs="$_RET_PKGNAMES"; unset _RET_PKGNAMES
	local version="$_RET_VERSION"; unset _RET_VERSION
	local deps="$_RET_DEPS"; unset _RET_DEPS
	local keys="$_RET_KEYS"; unset _RET_KEYS

	get_latest_version "$REPO_DIR" "$pkg_name"
	local old_version="$_RET_VERSION"; unset _RET_VERSION

	if [ "$version" != "$old_version" ]; then
		local old="$old_version"
		[ -n "$old" ] || old="<none>"
		say "Found new $pkg_name ($old -> $version)"
		local build=1
	elif [ -n "$force" ]; then
		say "Forced rebuild of $pkg_name"
		local build=1
	else
		say "Passed $pkg_name"
		return
	fi

	if [ -n "$build" ]; then
		sed -i -e "s/^#MAKEFLAGS=.*/MAKEFLAGS=-j$MAKE_J/g" /etc/makepkg.conf
		say "Using MAKE_J=$MAKE_J"
		append_repo "$REPO_NAME" "$REPO_DIR"
		prepare_build_dir "$PACKAGES_DIR/$pkg_name" "$BUILD_DIR"
		chown -R alarm:alarm "$CCACHE_DIR"
		test_sign "$BUILD_DIR"
# FIXME gpg от судо не хочет импортировать ключи с непонятной ошибкой
#		if [ -n "$keys" ]; then
#			for key in $keys; do
#				sudo -u alarm gpg --keyserver hkps://keyserver.ubuntu.com:443 --recv-key $key \
#				|| sudo -u alarm gpg --keyserver hkps://keys.gnupg.net:443 --recv-key $key \
#				|| sudo -u alarm gpg --keyserver hkps://pgp.mit.edu:443 --recv-key $key
#			done
#		fi
		install_deps "$deps"
		build "$BUILD_DIR"
		if [ -z "$norepo" ]; then
			if [ -n "$old_version" ]; then
				for sub_pkg_name in $pkgs; do
					remove_from_repo "$REPO_DIR" "$sub_pkg_name" "$old_version"
				done
				unset_latest_version "$REPO_DIR" "$pkg_name"
			fi
			copy_to_repo "$BUILD_DIR" "$REPO_DIR"
			rebuild_repo "$REPO_NAME" "$REPO_DIR"
			set_latest_version "$REPO_DIR" "$pkg_name" "$version"
			chown -R alarm:alarm "$REPO_DIR"/*
		fi
		say "Done!"
	fi
}

main "$1" "$2" "$3"
